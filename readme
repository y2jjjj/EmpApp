# 🚀 EMS WebApp (Employee Management System)

A **web-based Employee Management System** built with **Python (Flask/Django)** and deployed on **AWS EC2** using **Nginx + Gunicorn**.  
This project demonstrates **full-stack deployment** with domain configuration, reverse proxy, and process management.

***

## 🌐 Live Demo
🔗 [http://emswebapp.online](http://emswebapp.online)  

*(Note: The app may not be running 24/7 if the server is stopped.)*

***

## ⚙️ Features
- ➕ Add, update, delete employee records  
- 🔍 Search and filter employees  
- 🌐 REST API support for integration  
- 📱 Responsive frontend for ease of use  
- ☁️ Cloud-hosted with custom domain  

***

## 🛠️ Tech Stack
- **Backend:** Python (Flask/Django)  
- **Frontend:** HTML, CSS, JavaScript (Bootstrap)  
- **Database:** SQLite / MySQL  
- **Deployment:** AWS EC2, Nginx, Gunicorn, systemd  
- **Domain:** Hosted via Namecheap / Route53  

***

## 🚀 Deployment Architecture
1. **AWS EC2 Instance** (Ubuntu)  
2. **Gunicorn** (WSGI server to run Python app)  
3. **Nginx** (Reverse proxy for handling requests)  
4. **Systemd Service** (Keeps app running on reboot/crash)  
5. **Custom Domain (emswebapp.online)** pointing to EC2  

```mermaid
graph TD;
    A[Client Browser] --> B[Nginx (Port 80)];
    B --> C[Gunicorn (Port 8080)];
    C --> D[Flask/Django App];
```

***

## 📦 Installation & Setup (Local)

1. Clone the repository:

   ```bash
   git clone https://github.com/your-username/ems-webapp.git
   cd ems-webapp
   ```

2. Create virtual environment:

   ```bash
   python3 -m venv venv
   source venv/bin/activate
   ```

3. Install dependencies:

   ```bash
   pip install -r requirements.txt
   ```

4. Run locally:

   ```bash
   python app.py
   ```

   Visit: `http://127.0.0.1:5000/`

***

## 🚀 Deployment on AWS

### Step 1: Setup EC2

* Launch Ubuntu EC2 instance  
* Configure **Security Groups** (open port 80 for HTTP, port 22 for SSH)  

### Step 2: Install Dependencies

```bash
sudo apt update
sudo apt install python3-pip python3-venv nginx
```

### Step 3: Deploy with Gunicorn

```bash
gunicorn --workers 3 --bind 127.0.0.1:8080 app:app
```

### Step 4: Configure Nginx

`/etc/nginx/sites-available/emswebapp`

```nginx
server {
    listen 80;
    server_name emswebapp.online;

    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
```

Enable config:

```bash
sudo ln -s /etc/nginx/sites-available/emswebapp /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl restart nginx
```

### Step 5: Run as systemd Service

`/etc/systemd/system/emswebapp.service`

```ini
[Unit]
Description=Gunicorn instance to serve EMS WebApp
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/ems-webapp
ExecStart=/home/ubuntu/ems-webapp/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8080 app:app

[Install]
WantedBy=multi-user.target
```

Enable service:

```bash
sudo systemctl daemon-reload
sudo systemctl start emswebapp
sudo systemctl enable emswebapp
```

***

## 📸 Screenshots

*(Add some screenshots of your app UI here)*

***

## 🎯 Learning Outcomes

* Hosting a Python web app on **AWS EC2**  
* Configuring **Nginx as reverse proxy**  
* Running apps in production with **Gunicorn + systemd**  
* Domain setup with **DNS records**  
* End-to-end deployment workflow  

***

## 🤝 Contributing

Pull requests are welcome! For major changes, open an issue first.

***

## 📌 Author

👤 **Your Name**  
🔗 [LinkedIn](https://www.linkedin.com/in/yuvrajkumar2022) | [GitHub](https://github.com/y2jjjj)
```

---
